/*******************************************************************************
 * Copyright (c) 2000, 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.testng.eclipse.ui;

import org.testng.eclipse.util.ResourceUtil;

import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IMethod;
import org.eclipse.jdt.core.ISourceRange;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.ITypeHierarchy;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.ui.texteditor.ITextEditor;

/**
 * Open a class on a Test method.
 */
public class OpenTestAction extends OpenEditorAction {
	
	private String fMethodName;
	private ISourceRange fRange;
	
	/**
	 * Constructor for OpenTestAction.
	 */
	public OpenTestAction(TestRunnerViewPart testRunner, String className, String method) {
		this(testRunner, className, method, true);
	}
	
	public OpenTestAction(TestRunnerViewPart testRunner, String className) {
		this(testRunner, className, null);
	}

	public OpenTestAction(TestRunnerViewPart testRunner, String className, String method, boolean activate) {
		super(testRunner, className, activate);
		fMethodName= method;
	}

	protected IJavaElement findElement(IJavaProject project, String className) throws JavaModelException {
		IType type= project.findType(className);
		if (type == null) 
			return null;
		
		if (fMethodName == null)
			return type;
			
		IMethod method= findMethodInTypeHierarchy(type);
    if (null == method) {
      method= fuzzyFindMethodInTypeHierarchy(type);
    }
		if (method == null) {
			String title= ResourceUtil.getString("OpenTestAction.error.title"); //$NON-NLS-1$
			String message= ResourceUtil.getFormattedString("OpenTestAction.error.methodNoFound", fMethodName); //$NON-NLS-1$
			MessageDialog.openInformation(getShell(), title, message);
			return type;
		}
		fRange= method.getNameRange();
		return method;
	}
	
  IMethod findMethodInTypeHierarchy(IType type) throws JavaModelException {
    IMethod method= type.getMethod(fMethodName, new String[0]); 
    if (method != null && method.exists()) {
      return method;
    }

    ITypeHierarchy typeHierarchy= type.newSupertypeHierarchy(null);
    IType[] types= typeHierarchy.getAllSuperclasses(type);
    for (int i= 0; i < types.length; i++) {
      method= types[i].getMethod(fMethodName, new String[0]);
      if (method != null && method.exists()) {
        return method;
      }
    }
    
    return null;
  }
  	
  IMethod fuzzyFindMethodInTypeHierarchy(IType type) throws JavaModelException {
    IMethod[] methods= type.getMethods();
    for(int i= 0; i < methods.length; i++) {
      if(fMethodName.equals(methods[i].getElementName()) && methods[i].exists()) {
        return methods[i];
      }
    }

    ITypeHierarchy typeHierarchy= type.newSupertypeHierarchy(null);
    IType[] types= typeHierarchy.getAllSuperclasses(type);
    for (int i= 0; i < types.length; i++) {
      methods= types[i].getMethods();
        for(int j= 0; j < methods.length; j++) {
          if(fMethodName.equals(methods[j].getElementName()) && methods[j].exists()) {
            return methods[j];
          }
        }
    }
    
    return null;
  }
  
	protected void reveal(ITextEditor textEditor) {
		if (fRange != null)
			textEditor.selectAndReveal(fRange.getOffset(), fRange.getLength());
	}

	public boolean isEnabled() {
		try {
			return getLaunchedProject().findType(getClassName()) != null;
		} catch (JavaModelException e) {
		}
		return false;
	}
}
